import { useEffect, useState } from "react";
import browser from "webextension-polyfill";
import { LoadingView } from "./loading";
import { ErrorView } from "./error";
import styles from "./challenge.module.scss";

interface Props {
  setReady: () => void;
}

export function ChallengeView({ setReady }: Props) {
  const [pake, setPAKE] = useState<object>();
  const [pin, setPin] = useState("");
  const [error, setError] = useState<string>();

  const requestChallengePin = async () => {
    try {
      const { success, pake, error } = await browser.runtime.sendMessage({
        cmd: "REQUEST_CHALLENGE_PIN",
      });

      if (error !== undefined || !success) throw error;

      setPAKE(pake);
    } catch (e: any) {
      setError(e);
      setPAKE(undefined);
    }
  };

  const setChallengePin = async (pin: string, pake: object) => {
    // Setting the challenge PIN freezes the UI, so we delay it by 1 render frame for the input to have time to update one more time
    setTimeout(async () => {
      try {
        const { success, error } = await browser.runtime.sendMessage({
          cmd: "SET_CHALLENGE_PIN",
          pake,
          pin,
        });

        if (error !== undefined || !success) throw error;

        setReady();
      } catch (e: any) {
        setError(e);
        await requestChallengePin();
        setPin("");
      }
    }, 0);
  };

  useEffect(() => {
    requestChallengePin();
  }, []);

  useEffect(() => {
    if (pake === undefined || pin.length !== 6) return;

    setChallengePin(pin, pake);
  }, [pake, pin]);

  const handleChangePin = (pin: string) => {
    setError(undefined);

    pin = pin.replace(/\D/g, "");
    if (pin.length > 6) return;
    setPin(pin);
    setError(undefined);
  };

  if (error !== undefined && error !== "INVALID_PIN")
    return <ErrorView error={error} />;
  if (pake === undefined) return <LoadingView action="REQUEST_CHALLENGE_PIN" />;

  return (
    <div className={styles.challenge}>
      <img src="/images/PasswordsExtensionIcon_128.png" alt="" />
      <div>
        <h1>Enable Password AutoFill</h1>
        <p>
          {navigator.platform === "MacIntel" ? (
            <>
              A verification code has been generated by your Mac. Enter the code
              to continue.
            </>
          ) : (
            <>
              iCloud for Windows sent you a notification with a verification
              code. Enter the code to continue.
            </>
          )}
        </p>
        <input
          type="text"
          value={pin}
          onChange={(e) => handleChangePin(e.target.value)}
          autoFocus
          disabled={pin.length === 6}
          className={error === "INVALID_PIN" ? styles.invalid : undefined}
        />
      </div>
    </div>
  );
}
